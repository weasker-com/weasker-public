/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    pages: Page;
    media: Media;
    badges: Badge;
    interviews: Interview;
    applications: Application;
    'users-interviews': UsersInterview;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
export interface User {
  id: string;
  displayName?: string | null;
  userName: string;
  roles?: ('admin' | 'editor' | 'endUser' | 'qa')[] | null;
  userBadges?:
    | {
        badge: string | Badge;
        bio?: string | null;
        links?: {
          linkOne?: string | null;
          linkTwo?: string | null;
          linkThree?: string | null;
          linkFour?: string | null;
          linkFive?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  userInterviews?: (string | UsersInterview)[] | null;
  userApplications?: (string | Application)[] | null;
  seo: Seo;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
export interface Badge {
  id: string;
  singularName: string;
  pluralName: string;
  users?: (string | User)[] | null;
  interviews?: (string | Interview)[] | null;
  terms: string;
  seo: Seo;
  updatedAt: string;
  createdAt: string;
}
export interface Interview {
  id: string;
  name: string;
  badge: string | Badge;
  userInterviews?: (string | UsersInterview)[] | null;
  questions: {
    question: {
      shortQuestion: string;
      mediumQuestion: string;
      longQuestion: string;
      seo: Seo;
    };
    id?: string | null;
  }[];
  seo: Seo;
  updatedAt: string;
  createdAt: string;
}
export interface UsersInterview {
  id: string;
  badge: string | Badge;
  interview: string | Interview;
  user: string | User;
  badgeSlug?: string | null;
  interviewSlug?: string | null;
  userSlug?: string | null;
  answersAmount?: number | null;
  answers?:
    | {
        answer?: {
          questionSlug?: string | null;
          textAnswer?: string | null;
          images?:
            | {
                image?: string | Media | null;
                id?: string | null;
              }[]
            | null;
          video?: string | Media | null;
          updatedAt?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  documentTitle?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface Media {
  id: string;
  alt?: string | null;
  cloudinary?: {
    public_id?: string | null;
    original_filename?: string | null;
    format?: string | null;
    secure_url?: string | null;
    resource_type?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
export interface Seo {
  slug: string;
  title?: string | null;
  description?: string | null;
  excerpt?: string | null;
  image?: string | Media | null;
  keywords?: string[] | null;
}
export interface Application {
  id: string;
  badge: string | Badge;
  user: string | User;
  about: string;
  links?: {
    linkOne?: string | null;
    linkTwo?: string | null;
    linkThree?: string | null;
  };
  status?: ('pending' | 'approved' | 'denied') | null;
  updatedAt: string;
  createdAt: string;
}
export interface Page {
  id: string;
  name: string;
  category: 'help' | 'noCategory';
  richText?: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  richText_html?: string | null;
  seo: Seo;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}